
type Query {
  user: User!
  role: Role!
}

type Mutation {

  "Create and return an API key for the specified role, if owned by the current user."
  createApiKey(role: RoleId!): String!

  "Delete the specified API key, if owned by the current user. Returns the constant value `true`."
  deleteApiKey(id: ApiKeyId!): Boolean!

  "Updates the fallback profile for the specific user."
  updateFallback(id: UserId!, fallback: UserProfile!): User!
}

type Subscription {

  "A subscription that yields revoked API key identifiers."
  apiKeyRevocation: ApiKeyId!

}

type User {
  id:              UserId!
  orcidId:         OrcidId!
  primaryProfile:  UserProfile!
  fallbackProfile: UserProfile!
  roles:           [Role!]!
  apiKeys:         [ApiKey!]!
}

type UserProfile {
  givenName:  String
  familyName: String
  creditName: String
  email:      String
}

input UserProfileInput {
  givenName:  String
  familyName: String
  creditName: String
  email:      String
}

type Role {
  id:      RoleId!
  type:    RoleType!
  partner: Partner
  user:    User!
}

type ApiKey {
  id:   ApiKeyId!
  user: User!
  role: Role!
}

scalar UserId
scalar OrcidId
scalar RoleId
scalar ApiKeyId

enum RoleType { PI NGO STAFF ADMIN }
enum Partner { AR BR CA CL KR UH US }