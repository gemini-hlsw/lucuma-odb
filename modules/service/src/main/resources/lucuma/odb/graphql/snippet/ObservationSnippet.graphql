type Mutation {
  createObservation(
    # Observation description
    input: CreateObservationInput!
  ): Observation
  # updateObservation(
  #   # Edit observation
  #   input: EditObservationInput!
  # ): Observation!
}

scalar ObservationId

# Observation creation parameters
input CreateObservationInput {
  # observationId: ObservationId
  programId: ProgramId!
  name: NonEmptyString
  status: ObsStatus
  activeStatus: ObsActiveStatus
  # targetEnvironment: TargetEnvironmentInput
  # constraintSet: ConstraintSetInput
  # scienceRequirements: ScienceRequirementsInput
  # scienceConfiguration: ScienceConfigurationInput
}

type Observation {
  # Observation ID
  id: ObservationId!

  # DELETED or PRESENT
  existence: Existence!

  # Observation name
  name: NonEmptyString

  # Observation status
  status: ObsStatus!

  # Observation operational status
  activeStatus: ObsActiveStatus!

  # Observation planned time calculation.
  plannedTime: PlannedTimeSummary!

  # The program that contains this observation
  program(
    # Set to true to include deleted values
    includeDeleted: Boolean! = false
  ): Program!

  # # The observation's target(s)
  # targetEnvironment: TargetEnvironment!

  # # The constraint set for the observation
  # constraintSet: ConstraintSet!

  # # The top level science requirements
  # scienceRequirements(
  #   # Set to true to include deleted values
  #   includeDeleted: Boolean! = false
  # ): ScienceRequirements!

  # # The science configuration
  # scienceConfiguration(
  #   # Set to true to include deleted values
  #   includeDeleted: Boolean! = false
  # ): ScienceConfiguration

  # # Manual instrument configuration
  # manualConfig: Config

  # # Execution sequence and runtime artifacts
  # execution: Execution!
}

# Observation operational/active status options
enum ObsActiveStatus {
  # ObsActiveStatus Active
  ACTIVE

  # ObsActiveStatus Inactive
  INACTIVE
}

# Observation status options
enum ObsStatus {
  # ObsStatus New
  NEW

  # ObsStatus Included
  INCLUDED

  # ObsStatus Proposed
  PROPOSED

  # ObsStatus Approved
  APPROVED

  # ObsStatus ForReview
  FOR_REVIEW

  # ObsStatus Ready
  READY

  # ObsStatus Ongoing
  ONGOING

  # ObsStatus Observed
  OBSERVED
}

type PlannedTimeSummary {
  # The portion of planned time that will be charged
  pi: Duration!

  # The portion of planned time that will not be charged
  uncharged: Duration!

  # The total estimated execution time
  execution: Duration!
}
