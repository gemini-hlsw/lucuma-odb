type Query {

  "Returns the program with the given id, if any."
  program(

    "Program ID"
    programId: ProgramId!

    "Set to true to include deleted values"
    includeDeleted: Boolean! = false

  ): Program

  "Pages through all requested programs (or all programs if no ids are given)."
  programs(

    "(Optional) listing of programs to retrieve (all programs if empty)"
    programIds: [ProgramId!]

    "Retrieve `first` values after the given cursor"
    first: Int

    "Retrieve values after the one associated with this cursor"
    after: Cursor

    # Set to true to include deleted values
    includeDeleted: Boolean! = false

  ): [Program!]! # ProgramConnection!

}

"Program creation parameters"
input CreateProgramInput {

  "Program name (can be null but cannot be empty)."
  name: NonEmptyString

}

"Edit program"
input EditProgramInput {

  programId: ProgramId!

  "The existence field must be either specified or skipped altogether.  It cannot be unset with a null value."
  existence: Existence

  "The name field may be unset by assigning a null value, or ignored by skipping it altogether"
  name: NonEmptyString

}

"Link user"
input LinkUserInput {

  "The program to add a user to."
  programId: ProgramId!

  "The user to be added."
  userId: UserId!

  "The role this user will play in the program."
  role: ProgramUserRole!

  "Must be specified if and only if 'role' is SUPPORT"
  supportType: ProgramUserSupportRoleType

  "Must be specified if and only if 'supportType' is PARTNER"
  supportPartner: Partner

}

type Mutation {

  createProgram("Program description" input: CreateProgramInput!): Program!

  updateProgram("Edit program" input: EditProgramInput!): Program!

  """
  Link a user to a program. Any existing link will be replaced.
  This operation is available only to Admin and Service users.
  """
  linkUser(input: LinkUserInput!): ProgramUser!

  """
  Unlink a user from a program. Returns true if the user was unlinked, false if no such link exists.
  This operation is available only to Admin and Service users.
  """
  unlinkUser(

    "The program to unlink the user from."
    programId: ProgramId!

    "The user to unlink."
    userId: UserId!

  ): Boolean!

}

scalar ProgramId

type Program {

  "Program ID"
  id: ProgramId!

  "DELETED or PRESENT"
  existence: Existence!

  "Program name"
  name: NonEmptyString

  "Principal Investigator"
  pi: User

  #"All observations associated with the program (needs pagination)."
  #observations(
  #  "Retrieve `first` values after the given cursor"
  #  first: Int
  #
  #  "Retrieve values after the one associated with this cursor"
  #  after: Cursor
  #
  #  "Set to true to include deleted values"
  #  includeDeleted: Boolean! = false
  #): ObservationConnection!

  #"Program planned time calculation."
  #plannedTime(
  #  "Set to true to include deleted values"
  #  includeDeleted: Boolean! = false
  #): PlannedTimeSummary!

  "Users assigned to this science program"
  users:   [ProgramUser!]!

}

"The role a user a plays when assigned to a program."
enum ProgramUserRole {
  "Co-Investigator"             COI
  "Observer (read-only access)" OBSERVER
  "Staff/Partner Support"       SUPPORT
}

"The type of support role."
enum ProgramUserSupportRoleType {
  "Staff support"   STAFF
  "Partner support" PARTNER
}

"An assignment of a user to a program."
type ProgramUser {
  role:   ProgramUserRole!
  userId: UserId!
  user:   User!
}

type Subscription {

  """
  Subscribes to an event that is generated whenever a program is created
  or edited. A particular program id may be provided to limit events to
  that program.
  """
  programEdit(
    "Program ID"
    programId: ProgramId
  ): Program!

}

